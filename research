-reduce NPM package to require libraries
-update libraries to latest stable
-introduce Next 13, Tailwind, TypeScript
-mobile-first development, performance agenda
-maintain the same dependencies as we have now (ie Bloomreach) but focus on code performance
-chunk the primary work by page
  -main
  -CDP
  -PDP
  -cart
  -checkout
-pick a chunk above as a Q4 perf. guinea pig
-optimize our folder structure
  ie:
    /apps
      (main)
        /products
          /_components
          page.tsx
        /search
        layout.tsx
    /graphql
    /lib
    /public
    /tests
-reintroduce third party scripts that are currently being used via Next Script tools
-identify Bloomreach and other third party hard dependencies and see how we can interface them
  -create an EBComponent that itself calls these dependencies and via try/catch can handle errors
  -ie Bloomreach masthead gets imported but if it fails, the site fails. An interface should prevent this outcome
-identify business logic for this particular page.
  -what are the transactions, UI/UX required functionality?
  -what are the rules that but be obliged?
  -what API calls must be occur and when?
-cleanup and optimize local storage, cookies.
  -what is the bare minimum (if at all) that is required to persist on the client side?


SOLID Principles in React

S - single function
  * components should do one thing
  * limited side effects

O - open/close
  * composition should be used such that base components are closed for implementation but open for extension
  * ex. IconButton composes Button but should not require changes to IconButton

L - Liskov's substitution
  * Components that compose base components should be able be substituted for the base component
  * ex. Swapping IconButton for Button should work
  * TypeScript would utilize props of the base component

I - interface segregation
  * Components that compose a base component are using only those functions of the base component that they need.
  * If the base component does more than is needed, it may need to be broken down further into smaller base components via composition.
  * The component itself should only retrieve props it needs.

D - dependency inversion
  * Components should require abstract props according to their nature.
  * ie. ListComponent that renders a list shouldn't be opinionated about the list itself, where it comes from, or how it's retrieved.


resources
---------

mock data resource
https://www.mockaroo.com/

Icon resource
https://remixicon.com/
